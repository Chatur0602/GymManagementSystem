package Instructor;

import Instructor.*;
import static Instructor.InstructorIoHandler.addInstructor;
import static Instructor.InstructorIoHandler.allInstructors;
import java.time.format.DateTimeFormatter;
import static java.lang.String.format;
import java.text.Format;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

public class EditInstructor extends javax.swing.JFrame {
    public static String [] columnsName = {"Instructor ID", "Name", "Email ID", "Phone No.", "DOB", "Username", "Password"};
    public static String dataRow [] ;
    
    
    InstructorIoHandler IIH; 
    public EditInstructor() {
        allInstructors.clear();
        IIH = new InstructorIoHandler();
        initComponents(); 
        
        DefaultTableModel model = (DefaultTableModel)viewInstructorTable.getModel();
        model.setRowCount(0);
        model.setColumnIdentifiers(columnsName);
        Format date =new SimpleDateFormat("dd-MM-yyyy");
       
             for (Instructor list : allInstructors) {

                dataRow = new String[] {Integer.toString(list.getID()),list.getName(),list.geteMail(),list.getContact(),date.format(list.getDOB()), list.getUsername(), list.getPassword()};
                model.addRow(dataRow);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        exitLabel = new javax.swing.JLabel();
        backLabel = new javax.swing.JLabel();
        saveChangesButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewInstructorTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel3.setBackground(new java.awt.Color(0, 51, 102));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("STCaiyun", 3, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 0));
        jLabel1.setText("Edit Instructor");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, 180, -1));

        exitLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        exitLabel.setIcon(new javax.swing.ImageIcon("C:\\Users\\pc\\Documents\\NetBeansProjects\\GymManagementSystem\\src\\main\\java\\Resources\\icons8-exit-24.png")); // NOI18N
        exitLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitLabelMouseClicked(evt);
            }
        });
        jPanel3.add(exitLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 10, -1, 20));

        backLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        backLabel.setIcon(new javax.swing.ImageIcon("C:\\Users\\pc\\Documents\\NetBeansProjects\\GymManagementSystem\\src\\main\\java\\Resources\\icons8-back-24.png")); // NOI18N
        backLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backLabelMouseClicked(evt);
            }
        });
        jPanel3.add(backLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        saveChangesButton.setText("Save Changes");
        saveChangesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveChangesButtonMouseClicked(evt);
            }
        });
        jPanel3.add(saveChangesButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 370, 110, -1));

        viewInstructorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        viewInstructorTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewInstructorTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(viewInstructorTable);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 730, 300));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void exitLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitLabelMouseClicked
        System.exit(0);
    }//GEN-LAST:event_exitLabelMouseClicked

    private void backLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backLabelMouseClicked
        dispose();
        InstructorManagement IM = new InstructorManagement();
        IM.show();
        allInstructors.clear();
    }//GEN-LAST:event_backLabelMouseClicked
    
    
    private void viewInstructorTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewInstructorTableMouseClicked

    }//GEN-LAST:event_viewInstructorTableMouseClicked

    private void saveChangesButtonMouseClicked(java.awt.event.MouseEvent evt) {                                               
            DefaultTableModel model = (DefaultTableModel)viewInstructorTable.getModel();
            model.setColumnIdentifiers(columnsName);
            
            String Id = null;
            String name = null;
            String email = null;
            String contact = null;
            String d = null ;
            String username = null ;
            String password = null ;
            boolean characterFound = false;
            boolean validated = false;
            Instructor i = null ; 
            
            allInstructors.clear();
            
            for (int rowCount = 0; rowCount < model.getRowCount(); rowCount++){
                    Id = model.getValueAt(rowCount, 0).toString();
                    name = model.getValueAt(rowCount, 1).toString();
                    email = model.getValueAt(rowCount, 2).toString();
                    contact = model.getValueAt(rowCount, 3).toString();
                    d = model.getValueAt(rowCount, 4).toString() ;
                    username = model.getValueAt(rowCount, 5).toString();
                    password = model.getValueAt(rowCount, 6).toString();
                    Date date = null;
                    LocalDate DOB ;
                    String dateString;
                    int Age;
                    SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy");
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                try {
                    date = new SimpleDateFormat("dd-MM-yyyy").parse(d);
                
                    
                
                Pattern idPattern = Pattern.compile("[^0-9]");
                Matcher id = idPattern.matcher(Id);
                characterFound = id.find();
                if(characterFound == true || Integer.parseInt(Id) == 0){
                    JOptionPane.showMessageDialog(null,
                            "Incorrect Instructor ID, Use numeric characters only", "Warning",
                            JOptionPane.WARNING_MESSAGE);
                    validated = false;
                    break;
                }else{
                        Pattern namePattern = Pattern.compile("[^a-z]", Pattern.CASE_INSENSITIVE);
                        Matcher cName = namePattern.matcher(name);
                        characterFound = cName.find();
                       if(characterFound == true || name.length()<4){
                        JOptionPane.showMessageDialog(null,
                            "Incorrect Name f=Format, Minimum 4 letters & no special characters or numbers allowed", "Warning",
                            JOptionPane.WARNING_MESSAGE);
                        validated = false;
                        break;
                       }else{
                            Pattern eMailPattern = Pattern.compile("^[a-zA-Z0-9_+&*-]+(?:\\."+
                                "[a-zA-Z0-9_+&*-]+)*@" +
                                "(?:[a-zA-Z0-9-]+\\.)+[a-z" +
                                "A-Z]{2,7}$");
                            Matcher eMail = eMailPattern.matcher(email);
                            characterFound = eMail.find();
                            if(characterFound == false || email.length()<8){
                            JOptionPane.showMessageDialog(null,
                                "Incorrect E-Mail Format, Minimum 8 letters & must contain '@'", "Warning",
                                JOptionPane.WARNING_MESSAGE);
                            validated = false;
                            break;
                            }else{
                                    Pattern contactPattern = Pattern.compile("[^0-9]");
                                    Matcher cContact = contactPattern.matcher(contact);
                                    characterFound = cContact.find();
                                    if(characterFound == true || contact.length() != 10){
                                        JOptionPane.showMessageDialog(null,
                                            "Incorrect Contact Format, Must be 10 numeric digits long", "Warning",
                                            JOptionPane.WARNING_MESSAGE);
                                    validated = false;
                                    break;
                                    }else{
                                            dateString = format.format(date);
                                            DOB = LocalDate.parse(dateString, formatter);
                                            Age = Period.between(DOB, LocalDate.now()).getYears();

                                            if(Age<18){
                                                JOptionPane.showMessageDialog(null,
                                                    "Incorrect Age, Instructor must be at least 18 years old", "Warning",
                                                    JOptionPane.WARNING_MESSAGE);
                                            validated = false ;
                                            break;
                                            }else{
                                                    Pattern usernamePattern = Pattern.compile("[^a-z-0-9]", Pattern.CASE_INSENSITIVE);
                                                    Matcher userName = usernamePattern.matcher(username);
                                                    characterFound = userName.find();
                                                    if(characterFound == true || username.length()<8){
                                                        JOptionPane.showMessageDialog(null,
                                                            "Incorrect Username Format, Minimum 8 letters & no special characters or numbers allowed", "Warning",
                                                            JOptionPane.WARNING_MESSAGE);
                                                    validated = false;
                                                    break;
                                                    }else{
                                                            if(password.length()<8){
                                                                JOptionPane.showMessageDialog(null,
                                                                    "Incorrect Password Format, Minimum 8 letters","Warning",
                                                                    JOptionPane.WARNING_MESSAGE);
                                                            validated = false;
                                                            break;
                                                            }else{
                                                                    i = new Instructor(Integer.parseInt(Id), name, email, contact, date, username, password);
                                                                    InstructorIoHandler.allInstructors.add(i);
                                                                    validated = true;
                                                            }}}}}}}
                
            } catch (ParseException ex) {
                    JOptionPane.showMessageDialog(null,
                            "Incorrect Instructor DOB Format", "Warning",
                            JOptionPane.WARNING_MESSAGE);
                            validated = false ;
                            break;
                } catch (NumberFormatException e){
                        JOptionPane.showMessageDialog(null,
                            "Please enter a valid Instructor ID", "Warning",
                            JOptionPane.WARNING_MESSAGE);
                            validated = false ;
                            break;
                }
        }
            
        if (validated == true){
            JOptionPane.showMessageDialog(null,
                "Instructor Data Successfully Updated", "Success",
                JOptionPane.INFORMATION_MESSAGE);
            addInstructor();
        }
        
    }
                                                                                            

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
      
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditInstructor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel backLabel;
    private javax.swing.JLabel exitLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton saveChangesButton;
    private javax.swing.JTable viewInstructorTable;
    // End of variables declaration//GEN-END:variables
}
